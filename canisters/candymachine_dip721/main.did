type CanisterStatusArgs = record {
    "canister_id": principal;
};

type CanisterStatusResult = record {
    "status": CanisterStatus;
    "settings": DefiniteCanisterSettings;
    "module_hash": opt vec nat8;
    "memory_size": nat;
    "cycles": nat;
};

type DefiniteCanisterSettings = record {
    "controllers": vec principal;
    "compute_allocation": nat;
    "memory_allocation": nat;
    "freezing_threshold": nat;
};

type TokenIdToMetadata = record {
    "tokenId": nat;
    "tokenMetadata": TokenMetadata;
};

type TokenIdPrincipal = record {
    "principal": principal;
    "tokenIds": vec nat;
};

type TxEvent = record {
    "time": nat;
    "caller": principal;
    "operation": text;
    "details": vec TxDetails;
};

type Metadata = variant { "custodians": opt vec principal; "logo": opt text; "name": opt text; "symbol": opt text };

type NatResponseDto = variant { "Ok": opt nat; "Err": opt text };

type PrincipalResponseDto = variant { "Ok": opt principal; "Err": opt text };

type TokenMetadataResponseDto = variant { "Ok": opt TokenMetadata; "Err": opt text };

type BoolResponseDto = variant { "Ok": opt bool; "Err": opt text };

type Stats = variant { "total_transactions": nat; "total_supply": nat; "cycles": nat; "total_unique_holders": nat };

type propertyVariant = variant { "location": opt text; "contentType": opt text; "thumbnail": opt text };

type Ledger = variant { "tokensEntries": opt vec TokenIdToMetadata; "ownersEntries": opt vec TokenIdPrincipal; "operatorsEntries": opt vec TokenIdPrincipal; "txRecordsEntries": opt vec TxEvent };

type TokenMetadata = variant { "token_identifier": nat; "owner": principal; "operator": opt principal; "properties": vec propertyVariant; "is_burned": bool; "minted_at": nat; "minted_by": principal; "transferred_at": opt nat; "transferred_by": opt principal; "approved_at": opt nat; "approved_by": opt principal; "burned_at": opt nat; "burned_by": opt principal };

type TxDetails = variant { "operator": opt principal; "token_identifier": opt nat; "is_approved": opt bool; "owner": opt principal; "to": opt principal };

type CanisterStatus = variant { "running": null; "stopping": null; "stopped": null };

service: () -> {
    "metadata": () -> (Metadata) query;
    "name": () -> (text) query;
    "symbol": () -> (text) query;
    "logo": () -> (text) query;
    "custodians": () -> (vec principal) query;
    "totalUniqueHolders": () -> (opt nat) query;
    "supportedInterfaces": () -> (vec text) query;
    "balanceOf": (principal) -> (NatResponseDto) query;
    "ownerOf": (nat) -> (PrincipalResponseDto) query;
    "operatorOf": (nat) -> (PrincipalResponseDto) query;
    "ownerTokenMetadata": (principal) -> (PrincipalResponseDto) query;
    "operatorTokenIdentifiers": (principal) -> (PrincipalResponseDto) query;
    "tokenMetadata": (nat) -> (TokenMetadataResponseDto) query;
    "isApprovedForAll": (principal, principal) -> (BoolResponseDto) query;
    "setName": (text) -> ();
    "setLogo": (text) -> ();
    "setSymbol": (text) -> ();
    "setCustodians": (vec principal) -> ();
    "cycles": () -> (opt nat);
    "stats": () -> (Stats);
    "approve": (principal, nat) -> (NatResponseDto);
    "setApprovalForAll": (principal, bool) -> (NatResponseDto);
    "transfer": (principal, nat) -> (NatResponseDto);
    "transferFrom": (principal, principal, nat) -> (NatResponseDto);
    "mint": (principal, nat, vec propertyVariant) -> (NatResponseDto);
    "burn": (nat) -> (NatResponseDto);
}