type Metadata = record {
    "custodians": vec principal;
    "logo": text;
    "name": text;
    "symbol": text;
};

type Stats = record {
    "total_transactions": nat;
    "total_supply": nat;
    "cycles": nat;
    "total_unique_holders": nat;
};

type CanisterStatusArgs = record {
    "canister_id": principal;
};

type CanisterStatusResult = record {
    "status": CanisterStatus;
    "settings": DefiniteCanisterSettings;
    "module_hash": opt vec nat8;
    "memory_size": nat;
    "cycles": nat;
};

type Ledger = record {
    "tokensEntries": vec TokenIdToMetadata;
    "ownersEntries": vec TokenIdPrincipal;
    "operatorsEntries": vec TokenIdPrincipal;
    "txRecordsEntries": vec TxEvent;
};

type DefiniteCanisterSettings = record {
    "controllers": vec principal;
    "compute_allocation": nat;
    "memory_allocation": nat;
    "freezing_threshold": nat;
};

type TokenIdToMetadata = record {
    "tokenId": nat;
    "tokenMetadata": TokenMetadata;
};

type TokenMetadata = record {
    "token_identifier": nat;
    "owner": principal;
    "operator": opt principal;
    "properties": vec propertyVariant;
    "is_burned": bool;
    "minted_at": nat;
    "minted_by": principal;
    "transferred_at": opt nat;
    "transferred_by": opt principal;
    "approved_at": opt nat;
    "approved_by": opt principal;
    "burned_at": opt nat;
    "burned_by": opt principal;
};

type TokenIdPrincipal = record {
    "principal": principal;
    "tokenIds": vec nat;
};

type TxEvent = record {
    "time": nat;
    "caller": principal;
    "operation": text;
    "details": vec TxDetails;
};

type NatResponseDto = variant { "Ok": opt nat; "Err": opt text };

type PrincipalResponseDto = variant { "Ok": opt principal; "Err": opt text };

type TokenMetadataResponseDto = variant { "Ok": opt TokenMetadata; "Err": opt text };

type BoolResponseDto = variant { "Ok": opt bool; "Err": opt text };

type TxEventResponseDto = variant { "Ok": opt TxEvent; "Err": opt text };

type propertyVariant = variant { "location": opt text; "contentType": opt text; "thumbnail": opt text };

type TxDetails = variant { "operator": opt principal; "token_identifier": opt nat; "is_approved": opt bool; "owner": opt principal; "to": opt principal };

type CanisterStatus = variant { "running": null; "stopping": null; "stopped": null };

service: () -> {
    "metadata": () -> (Metadata) query;
    "name": () -> (text) query;
    "symbol": () -> (text) query;
    "logo": () -> (text) query;
    "custodians": () -> (vec principal) query;
    "totalTransactions": () -> (nat32) query;
    "totalSupply": () -> (nat32) query;
    "totalUniqueHolders": () -> (opt nat) query;
    "supportedInterfaces": () -> (vec text) query;
    "balanceOf": (principal) -> (NatResponseDto) query;
    "ownerOf": (nat) -> (PrincipalResponseDto) query;
    "operatorOf": (nat) -> (PrincipalResponseDto) query;
    "ownerTokenMetadata": (principal) -> (PrincipalResponseDto) query;
    "operatorTokenIdentifiers": (principal) -> (PrincipalResponseDto) query;
    "tokenMetadata": (nat) -> (TokenMetadataResponseDto) query;
    "isApprovedForAll": (principal, principal) -> (BoolResponseDto) query;
    "transaction": (nat32) -> (TxEventResponseDto) query;
    "setName": (text) -> ();
    "setLogo": (text) -> ();
    "setSymbol": (text) -> ();
    "setCustodians": (vec principal) -> ();
    "cycles": () -> (opt nat);
    "stats": () -> (Stats);
    "approve": (principal, nat) -> (NatResponseDto);
    "setApprovalForAll": (principal, bool) -> (NatResponseDto);
    "transfer": (principal, nat) -> (NatResponseDto);
    "transferFrom": (principal, principal, nat) -> (NatResponseDto);
    "mint": (principal, nat, vec propertyVariant) -> (NatResponseDto);
    "burn": (nat) -> (NatResponseDto);
}